// Copyright 2014-2016 Vladimir Alyamkin. All Rights Reserved.

#pragma once

#include "VaOceanPluginPrivatePCH.h"
#include "VaOceanSimulator.generated.h"

#define PAD16(n) (((n)+15)/16*16)

/**
 * Renders normals and heightmap from Phillips spectrum
 */
UCLASS(Blueprintable, BlueprintType, ClassGroup=Environment)
class VAOCEANPLUGIN_API AVaOceanSimulator : public AActor
{
	GENERATED_UCLASS_BODY()


	//////////////////////////////////////////////////////////////////////////
	// Initialization

protected:
	/** Initialize all buffers and prepare shaders */
	void InitializeSimulator();

	/** Initialize the vector field */
	void InitHeightMap(const FSpectrumData& Params, TResourceArray<FVector2D>& out_h0, TResourceArray<float>& out_omega);

	/** Initialize buffers for shader */
	void CreateBufferAndUAV(FResourceArrayInterface* Data, uint32 byte_width, uint32 byte_stride, FStructuredBufferRHIRef* ppBuffer, FUnorderedAccessViewRHIRef* ppUAV, FShaderResourceViewRHIRef* ppSRV);

	// Begin UObject Interface
	virtual void BeginDestroy() override;
#if WITH_EDITOR
	virtual void PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent) override;
#endif // WITH_EDITOR
	// End UObject Interface


	//////////////////////////////////////////////////////////////////////////
	// Simulation

public:
	/** Update ocean simulation */
	virtual void Tick(float DeltaSeconds) override;

protected:
	/** Update normals and heightmap from spectrum */
	void UpdateDisplacementMap(float WorldTime);


	//////////////////////////////////////////////////////////////////////////
	// Spectrum configuration

public:
	/** Get spectrum config */
	UFUNCTION(BlueprintCallable, Category = "VaOcean|FFT")
	const FSpectrumData& GetSpectrumConfig() const;

protected:
	/** Ocean spectrum data */
	UPROPERTY(EditDefaultsOnly, Category = Config)
	FSpectrumData SpectrumConfig;


	//////////////////////////////////////////////////////////////////////////
	// Shader output targets

public:
	/** Render target for normal map that can be used by the editor */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = OceanSpectrum)
	class UTextureRenderTarget2D* DisplacementTarget;

	/** Render target for height map that can be used by the editor */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = OceanSpectrum)
	class UTextureRenderTarget2D* GradientTarget;


	//////////////////////////////////////////////////////////////////////////
	// Parameters that will be send to rendering thread

protected:
	FUpdateSpectrumCSImmutable UpdateSpectrumCSImmutableParams;


	//////////////////////////////////////////////////////////////////////////
	// Spectrum simulation data

protected:
	/** Initial height field H(0) generated by Phillips spectrum & Gauss distribution. */
	FStructuredBufferRHIRef m_pBuffer_Float2_H0;
	FUnorderedAccessViewRHIRef m_pUAV_H0;
	FShaderResourceViewRHIRef m_pSRV_H0;

	/** Angular frequency */
	FStructuredBufferRHIRef m_pBuffer_Float_Omega;
	FUnorderedAccessViewRHIRef m_pUAV_Omega;
	FShaderResourceViewRHIRef m_pSRV_Omega;

	/** Height field H(t), choppy field Dx(t) and Dy(t) in frequency domain, updated each frame. */
	FStructuredBufferRHIRef m_pBuffer_Float2_Ht;
	FUnorderedAccessViewRHIRef m_pUAV_Ht;
	FShaderResourceViewRHIRef m_pSRV_Ht;

	/** Height & choppy buffer in the space domain, corresponding to H(t), Dx(t) and Dy(t) */
	FStructuredBufferRHIRef m_pBuffer_Float_Dxyz;
	FUnorderedAccessViewRHIRef m_pUAV_Dxyz;
	FShaderResourceViewRHIRef m_pSRV_Dxyz;

	FVector4 m_pQuadVB[4];

	/** FFT wrap-up */
	FRadixPlan512 FFTPlan;

};
